/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/app.ts
var import_obsidian3 = require("obsidian");

// src/view.ts
var import_obsidian = require("obsidian");

// src/utils.ts
function pad(num) {
  if (!num)
    return "00";
  return num.toString().padStart(2, "0");
}
function formatDuration(ms) {
  if (ms < 0 || !Number.isFinite(ms))
    return "0:00:00";
  const totalSec = Math.floor(ms / 1e3);
  const h = Math.floor(totalSec / 3600);
  const m = Math.floor(totalSec % 3600 / 60);
  const s = totalSec % 60;
  let string = "";
  if (h) {
    string += `${h}h`;
  }
  if (m) {
    string += ` ${m}m`;
  }
  string += ` ${pad(s)}s`;
  return string.trim();
}
function isoNow() {
  return new Date().toISOString();
}
function parseISO(s) {
  if (!s)
    return null;
  const d = new Date(s);
  return isNaN(d.getTime()) ? null : d;
}
function formatTime(date) {
  if (!date)
    return "";
  const parsed = parseISO(date);
  return `${pad(parsed == null ? void 0 : parsed.getHours())}:${pad(parsed == null ? void 0 : parsed.getMinutes())}:${pad(parsed == null ? void 0 : parsed.getSeconds())}`;
}
function calcOwnDuration(startISO, endISO) {
  var _a, _b;
  const start = (_a = parseISO(startISO)) == null ? void 0 : _a.getTime();
  const end = (_b = endISO ? parseISO(endISO) : new Date()) == null ? void 0 : _b.getTime();
  if (!start || !end)
    return 0;
  return Math.max(0, end - start);
}

// src/view.ts
var VIEW_TYPE_TASK_TIMER = "task-timer-view";
var TaskTimerView = class extends import_obsidian.ItemView {
  constructor(leaf, controller) {
    super(leaf);
    this.controller = controller;
  }
  getViewType() {
    return VIEW_TYPE_TASK_TIMER;
  }
  getDisplayText() {
    return "Task Timer";
  }
  getIcon() {
    return "clock";
  }
  readAndClearInputValue() {
    const value = this.input.getValue();
    this.input.setValue("");
    return value;
  }
  updateView() {
    this.renderArchiveTable();
  }
  getContainer() {
    const container = this.containerEl;
    container.empty();
    return container;
  }
  renderBaseElements() {
    const container = this.getContainer();
    this.controlsEl = container.createDiv();
    this.archiveTableEl = container.createDiv({ cls: "task-timer-archive" });
  }
  renderControlElements() {
    const container = this.controlsEl;
    const controls = new import_obsidian.Setting(container);
    this.input = new import_obsidian.TextComponent(controls.controlEl).setPlaceholder("E.g. Buy a milk");
    this.input.inputEl.addEventListener("keyup", ({ key }) => {
      if (key === "Enter") {
        this.controller.appendTask(this.readAndClearInputValue());
      }
    });
    this.input.inputEl.classList.add("task-timer-input");
    this.subBtn = new import_obsidian.ButtonComponent(controls.controlEl).setIcon("play").setTooltip("Start task").setClass("task-timer-button").onClick(async () => {
      this.controller.appendTask(this.readAndClearInputValue());
    });
    this.endBtn = new import_obsidian.ButtonComponent(controls.controlEl).setIcon("pause").setTooltip("Stop all tasks").setClass("task-timer-button").onClick(async () => {
      this.controller.endAllTasks();
    });
    this.startBtn = new import_obsidian.ButtonComponent(controls.controlEl).setIcon("step-forward").setTooltip("Stop all and start task").setClass("task-timer-button").onClick(async () => {
      this.controller.startNewTask(this.readAndClearInputValue());
    });
  }
  async runInterval() {
    this.updateView();
    this.registerInterval(this.interval);
  }
  async onOpen() {
    const container = this.getContainer();
    container.classList.add("task-timer-container");
    console.log(4);
    this.renderBaseElements();
    this.renderControlElements();
    this.runInterval();
  }
  async onClose() {
    if (this.interval)
      window.clearInterval(this.interval);
  }
  renderArchiveTable() {
    const container = this.archiveTableEl;
    container.empty();
    const renderRow = (task) => {
      const isDone = !!task.endTime;
      const body = container.createDiv({
        cls: "task-timer-item"
      });
      const labelEl = body.createDiv({
        cls: [
          "task-timer-item__label-wrap",
          isDone ? "task-timer-item__label-wrap--done" : "task-timer-item__label-wrap--running"
        ]
      });
      (0, import_obsidian.setIcon)(labelEl.createSpan(), isDone ? "circle-check-big" : "loader-circle");
      labelEl.createEl("h3", {
        text: task.name,
        cls: "task-timer-item__label"
      });
      createTime(labelEl);
      body.createSpan({
        text: formatDuration(calcOwnDuration(task.startTime, task.endTime)),
        cls: "task-timer-item__date"
      });
      body.createEl("hr", { cls: "task-timer-item__delimiter" });
      function createTime(container2) {
        const dateWrapperEl = container2.createEl("p", {
          cls: "task-timer-item__time"
        });
        dateWrapperEl.createSpan({
          text: formatTime(task.startTime)
        });
        if (isDone) {
          dateWrapperEl.createSpan({
            text: " - "
          });
          dateWrapperEl.createSpan({
            text: formatTime(task.endTime)
          });
        }
      }
    };
    console.log(1);
    console.log(this.controller.getTasks());
    for (const e of this.controller.getTasks())
      renderRow(e);
  }
};

// src/model.ts
var TimerModel = class {
  constructor() {
    this.archive = /* @__PURE__ */ new Map();
  }
  initModel(archive) {
    archive.forEach((task) => {
      this.archive.set(task.id, task);
    });
  }
  getFlatTasks() {
    return Array.from(this.archive.values()).sort((a, b) => {
      if (a.startTime < b.startTime)
        return 1;
      return -1;
    });
  }
  getFlatRunningTasks() {
    return this.getFlatTasks().filter(({ endTime }) => !endTime);
  }
  getNewTask(name) {
    const id = Date.now() + "c";
    if (!(name == null ? void 0 : name.trim()))
      name = `Block ${this.getFlatTasks().length + 1}`;
    console.log(isoNow());
    return {
      id,
      name,
      startTime: isoNow(),
      endTime: null
    };
  }
  appendTask(name) {
    const root = this.getNewTask(name);
    this.archive.set(root.id, root);
  }
  endTaskById(id) {
    const task = this.archive.get(id);
    if (task) {
      task.endTime = isoNow();
    }
  }
  endAllTasks() {
    for (const task of this.getFlatRunningTasks()) {
      task.endTime = isoNow();
    }
  }
  renameTaskById(id, newName) {
    const task = this.archive.get(id);
    if (task) {
      task.name = newName.trim();
    }
  }
  intersectionDuration(prevTask, nextTask) {
    const startPrev = Date.parse(prevTask.startTime);
    const endPrev = Date.parse(prevTask.endTime || isoNow());
    const startNew = Date.parse(nextTask.startTime);
    const endNew = Date.parse(nextTask.endTime || isoNow());
    if (startPrev <= startNew && endNew <= endPrev) {
      return startPrev - endPrev;
    }
    if (startNew <= startPrev && endPrev <= endNew) {
      return startNew - endNew;
    }
    if (startPrev <= startNew && endPrev <= endNew) {
      return startPrev - endNew;
    }
    if (startNew <= startPrev && endNew <= endPrev) {
      return startNew - endPrev;
    }
    return 0;
  }
  getCurrentTasksDuration() {
    return 0;
  }
  getOverallRunningDuration() {
    return 0;
  }
};

// src/storage.ts
var import_obsidian2 = require("obsidian");
var ARCHIVE_PATH = "archive.md";
var TaskStorage = class {
  constructor(app) {
    this.app = app;
  }
  async loadArchive() {
    try {
      const file = this.app.vault.getFileByPath(ARCHIVE_PATH);
      if (!file)
        return [];
      const content = await this.app.vault.read(file);
      const match = content.match(/```json\n([\s\S]*?)\n```/);
      if (!match)
        return [];
      return this.fromTimekeepFormat(match[1]);
    } catch (e) {
      console.error(e);
      return [];
    }
  }
  async saveArchive(tasks) {
    var _a;
    const data = this.toTimekeepFormatJSON(tasks);
    const mdContent = `\`\`\`json
${data}
\`\`\``;
    const file = this.app.vault.getAbstractFileByPath(ARCHIVE_PATH);
    if (file instanceof import_obsidian2.TFile) {
      const content = await this.app.vault.read(file);
      const match = content.match(/```json\n([\s\S]*?)\n```/);
      let appendContent = "";
      const index = match ? (_a = match.index) != null ? _a : -1 : -1;
      if (match && index > -1) {
        appendContent = content.slice(0, index) + mdContent + content.slice(index + match[0].length);
      } else {
        appendContent = content + "\n" + mdContent;
      }
      await this.app.vault.modify(file, appendContent);
    } else {
      await this.app.vault.create(ARCHIVE_PATH, mdContent);
    }
  }
  toTimekeepFormatJSON(tasks) {
    return JSON.stringify({
      entries: tasks
    });
  }
  mapTimekeepEntry(entry, name) {
    if ("subEntries" in entry) {
      const { subEntries: _, ...task } = entry;
      return {
        ...task,
        name: name && !name.startsWith("Part") ? name : task.name,
        id: String(Math.random())
      };
    }
    return entry;
  }
  flattenTimekeepSubEntries(tasks, name) {
    if (!(tasks == null ? void 0 : tasks.length))
      return [];
    return tasks.flatMap((entry) => {
      var _a;
      if ((_a = entry.subEntries) == null ? void 0 : _a.length) {
        return this.flattenTimekeepSubEntries(entry.subEntries, entry.name);
      } else {
        return [this.mapTimekeepEntry(entry, name)];
      }
    });
  }
  fromTimekeepFormat(json) {
    try {
      const data = JSON.parse(json);
      const entries = data.entries;
      return this.flattenTimekeepSubEntries(entries);
    } catch (e) {
      console.log(e);
      return [];
    }
  }
};

// src/controller.ts
var TaskController = class {
  constructor(app) {
    this.app = app;
    this.storage = new TaskStorage(this.app);
    this.model = new TimerModel();
  }
  getTasks() {
    return this.model.getFlatTasks();
  }
  getRunningTasks() {
    return this.model.getFlatRunningTasks();
  }
  async loadArchive() {
    const archive = await this.storage.loadArchive();
    this.model.initModel(archive);
    console.log(2);
  }
  async initView(view) {
    this.view = view;
    console.log(3);
  }
  startNewTask(name) {
    this.model.endAllTasks();
    this.model.appendTask(name);
    this.view.updateView();
    this.storage.saveArchive(this.model.getFlatTasks());
  }
  appendTask(name) {
    this.model.appendTask(name);
    this.view.updateView();
    this.storage.saveArchive(this.model.getFlatTasks());
  }
  endAllTasks() {
    this.model.endAllTasks();
    this.view.updateView();
    this.storage.saveArchive(this.model.getFlatTasks());
  }
};

// src/app.ts
var TaskTimerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.controller = new TaskController(this.app);
      this.registerView(
        VIEW_TYPE_TASK_TIMER,
        (leaf) => {
          this.controller.loadArchive();
          const view = new TaskTimerView(leaf, this.controller);
          this.controller.initView(view);
          return view;
        }
      );
      this.addRibbonIcon("clock", "Task Timer", () => this.activateView());
      this.addCommand({ id: "open-task-timer", name: "Open Task Timer", callback: () => this.activateView() });
    });
  }
  async onunload() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_TASK_TIMER).forEach((leaf) => leaf.detach());
  }
  async activateView() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_TASK_TIMER);
    if (leaves.length === 0) {
      let leaf = this.app.workspace.getRightLeaf(false);
      if (!leaf) {
        leaf = this.app.workspace.getLeaf(!import_obsidian3.Platform.isDesktop);
      }
      await leaf.setViewState({ type: VIEW_TYPE_TASK_TIMER, active: true });
    }
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(VIEW_TYPE_TASK_TIMER)[0]);
  }
};

// main.ts
var main_default = TaskTimerPlugin;
//# sourceMappingURL=data:application/json;base64,
